 Hi everyone, in this video we are going to learn what does HTTP request consist of. Let's begin. The request method is a complex structure and if we would want to learn everything about it, it will take a lot of time. But to be able to run some basic tests of REST API, we don't need to know everything. We need to know at least two things. What are the URL and its structure? And what is the request method? Let's start with a URL. As usual, we start from the definition. And as usual, there are a lot of fancy words. A uniform resource locator URL, colloquially termed as web address, is a reference to a web resource that specifies its location on a computer network and a mechanism for redriving it. Let's keep it simple. The key words here are the web resource and the web address. Let's start with the web address. When you hear the word address, you think about something like this. Under the stairs, four private drive, little winging, Surrey, England, Greybirdon. So if somebody wants to find you, they can go to the country, then region, then exactly your house and even locate you in the house in our case. The web address is exactly the same thing. When you type in the address bar, google.com, it is the address of the house or server. If it is more detailed like google.com, slash maps, slash place, Los Angeles, California, USA, it means that you are under the stairs locked and can go out so you can be found there. But to be able to test API, you will need to know a little more about the URL structure. Let's check it based on this Google Maps link. We will divide this into three parts. It is not exactly right, but for now it is detailed enough. We have the protocol, HDPS, the domain name, www.google.com, and the path, which means that Harry hides under the stairs. And we will start from the domain name. One more complex definition. Let's read it out loud as usual. A domain name identifies an network domain or an internet protocol resource, such as a personal computer used to access the internet or a server computer. In simple words, it is the IP, the internet protocol. And I hope everybody knows what it is, or at least has seen it. If not, the IP is these numbers. And again for now, we don't need to dive too deep into this and be very accurate. All that you need to know is that google.com. In reality is the IP address, and IP address is the address of your device, like the exact address on your home. Your private drive, little winging, sorry, England, Greybwritten. This www.google.com is for us humans. So we can remember it and write it into the address bar. The browsers and servers want the numbers, the IP, instead of the human words. In other words, when you type google.com, the browser finds the IP address instead of you, to simplify your life. It is the same as the phone book on your smartphone. How many phone numbers do you remember? Not much I believe. Instead, you type your friend's name and see the phone number on the screen. You remember the name, not the numbers. Exactly the same happens with the websites. You remember websites names, Facebook, Google. You don't even know that those are IP address. To summarize, the website name, the domain name, is the IP. And the IP is the numbers, which means the address, like the real address of your house. Let's check this schema. As usual, we have the client, the browser app in this case, and we have the server. This time we have the domain name of the server, www.google.com. And as we said before, it is the IP address with numbers. And in reality, it is the real address of the server, the location where it is at this moment. Another thing worth mentioning is that each physical device, when connected to the internet, hasn't addressed as well. What is missed in our diagram is how a domain name is transformed into the IP address numbers. First of all, it is important to remember that both client and the server need to be connected to the internet. Otherwise, they won't be able to communicate. So we will add small internet icons here to the client and the server as well. And we will need to add the cloud as well. The internet, the worldwide web. Because all the clients and all the servers live in a cloud and are connected to the cloud, as imagine the real user scenario. You type the domain name, google.com, into the address bar, and press search. Each time your browser sends the same question. Oh, deep thought, I want to tell you the answer. The answer to life, the universe, everything. And each time it provides exactly the same answer, 42. I decided that there should be at least one joke in this video. And it was a good one. Let's check what happens in reality. In reality, the browser asks the domain system, which also lives in the cloud. About the IP address for the domain name, which you entered in the browser bar. And the cloud provides the IP address to the browser. And the browser knows the exact IP of the server. It can send the HTTP request. But before this, we need to learn what the last part of the URL is. And it is the path. And as usual, we start from definition. The path refers to the exact location of a resource, page, file, or other asset. The path resides after the host name and is separated by slash forward slash. And it is hard to imagine or get what it means. And we said before, the domain name is the house's location. It shows on which straight it is located and which house you need. Like for private drive. But you have no idea what is there, a house, a stadium, a coffee shop, maybe. You don't know. And the path is the exact location, like under the stairs. And more, the path specifies exactly what you want. So it says there is a house and under the stairs, there is a LA map. That is what I need. And that is where it is. Welcome back to the scheme again. So you want to see what is stored on Google.com. You haven't specified the path, what happens in this case. The browser sends this message to the internet. And then when the server receives the message and the message is without the pass, everything depends on the server logic. But in our case, the server will find the home page. Many modern websites can rewrite URLs like the home page for simplicity and elegance. That is what happened in our case. In reality, you also specify the resource just again, it is hidden from you. And when a client will receive the home page, it will render it on your screen. Let's check what happens in the scenarios where you specify the pass. Everything looks nearly the same. The difference is that you have specified that you want a map and that is under the stairs. You have specified which file you want and its exact location. The server easily finds the map and sends it back. The client app, the browser, renders the map for you. And you see the LA map in your browser. Again, everything is on a very, very high level and not exactly accurate. But it is still a lot of information. We will dig deep into details later. For now, I just want you to see the whole picture of how the internet file transition works. So we have talked about the domain name, which is the web address. And we have talked about the resource, path to web pages, images, maps, whatever. But there is one thing which is at the start of the URL. Adverse bar hides it from us in browsers because users have no need to see it. The HTTP part, the protocol. There are two words in this definition which deserve additional attention. The protocol and the data. The data is clear for now. It can be any data like the web page, image, video, etc. But the protocol part is not that easy to explain. The protocol is a set. So we have talked about the domain name, which is the web address. And we have talked about the resource, path to web pages, images, maps, whatever. But there is one thing which is at the start of the URL. Adverse bar hides it from us in browsers because users have no need to see it. The HTTP part, the protocol. There are two words in this definition which deserve additional attention. The protocol and the data. The data is clear for now. It can be any data like the web page, image, video, etc. But the protocol part is not that easy to explain. The protocol is a set of rules on how this data should be transferred. Instead of technical terms, let's try to explain this base on the analogy. Very very old analogy. Let's migrate to the early 1900s. Age before the smartphones, internet and McDonald's. The story was old, but the problem is the same. The little girl wanted a map of a coffee shop in LA. Yes, I know that kids don't drink coffee. The map was for her mom. Anyway, the girl lives in England and the map company is in the US. They didn't have the internet those days. So, the little girl writes a letter to Mr. Google company. The letter is the request data in our case. In the letter, she asks for the resource, the map. And the only way to send the letter is to use the post office by the conversation with post lady is short. It ends up that you need to have a passport to be able to send the letter and money to buy a mark and pay for the post office services. The post office has a protocol with a lot of rules. It checks you the center, who are you, where you live if you have 18 years old, etc. Same about the address. Rules about how the letter should look and its weight. And if any of those rules are not supported, the letter won't be approved to send. It ends up that mom fills the envelope according to the rules and puts the mark on it and goes through the girl to the post office. The post office lady checks is everything is according to the protocol and sends the letter to Mr. Google. This is a nice little story from the early 1900s, but the current World Wide Web works similarly. Instead of the little girl's mom, we have a client app, the browser. And let's imagine that the client sends the same message to the web. I need a map of coffee shops in LA. Then the cloud, same as the post office lady in the 1900s. We'll ask the browser to answer where her mom is. And again, it is because the cloud has the protocols, the rules. The protocol declares how your web browser should communicate with the web server. Same as the post office in the 1900s, the rules are related to the client, the server, the data package, and the message format. The browser doesn't have a mom, so it needs to send an appropriate kind of message itself. It provides a lot of data in an appropriate format and sends it to the cloud again. The cloud checks the message and if it is valid, sends it to the server. The server process the request finds the map and sends the message back to the cloud. The server knows the HTTP rules and sends the valid HTTP response. And the client finally receives everything and can render the page, put a map there and show the coffee shops to you. That is how it works in the HTTP world. Unfortunately, we are not there yet. You can go drink a cup of coffee and we will continue. The good news is that we have finished with the URL. Now you know that path is the path to the data on the server, like a web page or other data. The domain name is the IP address of the server. And the HTTP is the rules of how data can be requested by the client and be returned by the server. But there are still a couple of steps we need to do to understand developers' comment. Let's go back and check the requested client sent. There was one thing which we didn't explain. The HTTP is the protocol with the rules and one of the rules is client request should have the request methods. And we see the client sent GAT. So what does it mean? Request method GAT. According to the definition, the HTTP defines methods to indicate the desired action to be performed on the identified resource. And it means exactly what it says. In our example, the server has the resource web page. And the client, the browser, sends a GAT method in the message, because we want to get a web page. Each time when you enter a website name into the address bar and press search, the browser sends the GAT method by default. You don't see this because most users don't need to know this details. Same as you don't see HTTP and double-double-double-you in the address bar. Let's check other methods and where those are used. As we already discussed, the GAT method redrives resources from the server. The post method creates data, the put method. Updates data. And the delete method deletes data. The methods are self-described. That is why those are called verbs sometimes. There are a lot of other methods like head options, but we are interested in this for for now. Let's talk about those with the examples. We talked about the home page as an example of the resource, but we can't explain the other methods with a home page example. Even if you want, you can't delete the Google home page. All you can do with it is view it. You can send only a GAT method. We are going to talk about the coffee shops again. It has been a while since we used this example. Here we go again. We are going to use the reviews of the coffee shops in Google Maps. The coffee shop in Google Maps is the resource, and your review itself is the resource as well. And as said, the resource is a very wide term. Let's say you have been to the coffee shop, and you didn't like the coffee. On your smartphone, you write a comment and click the post button. And your browser will stand for messages into a appropriate format for you. So your comment will be sent in a JSON format, and the method which will be used will be the post method, because you want to create a review. The resource and the server says the comment, so other people can view it. And you can as well. So you want to see if your comment is published and other people can see it. So you go back to the map and click on the reviews button. When you click on the button, the browser sends a request to the server, the server. The method is GAT, because you want to retry the reviews. And the resource path is like this with a review resource in the end. Also, the client app sends the place ID, because you want to see reviews of the particular coffee shop, not all reviews in the world. The server receives their request, looks for all reviews related to the place ID 42, and sends a response back. And you can see your review among the others. We are going to have a couple of separate videos about each of the methods. Because of this, we will keep put and delete for now. I think you already got the concept. If you want to change your review, the method would be put. And if you would want to delete your review, the method would be delete. And I'm going to put the method in the description.