 Hello everyone, welcome to the video Exploratory Testing of GAD endpoint without knowledge of the project. Let's begin. In a previous video, we selected the testing techniques to use on our project. Exploratory Testing and checklist-based testing. And started the first API checklist. We created two test cases in our checklist in Google Sheet. We did the same in the postman. One happy path test case and one negative test case. Now it is time for Exploratory Testing. Let's begin. And we will start by reading the documentation. When I test, I want to have some ideas behind that. Our first document is the screenshot of the request in the smager. What we can learn there? First of all, we can see that the request is very simple. We have a method, GAD, and we have only one requirement, pass parameter. We don't have query parameters, we don't have required headers, and we don't have authorization. It simplifies our work a lot. Let's start with the method. The specified method is GAD. So what is the positive test case for the method? It means that we sent what was expected, GAD. And I will add it to the happy path. So we will know what happy path checks this as well. What is the negative test case for the method? Should we send the not specified method like post? And the answer is simple. It depends. It depends on what you are testing and on which kind of project you work. And as discussed before, we don't have knowledge of the project. What can we do in this case? That's right. We are going to try it. And when we try it, we got 200 OK. And some strange response body. Let's save this to the post one as the negative post test case. So we will remember what happened. I created two more folders, positive and negative, and saved our post test case to the negative folder, and saved the response that we got. All of this will be useful when we are going to discuss what we learned with the team. Let's add this test to our checklist now. So we did the same structure in the checklist. We have the positive folder and negative folder. And the happy path has only the method check, and the negative folder has two test cases. And we are not going to check all the rest methods. We need to talk with the team about at least this scenario first. Let's move to the path parameter now. This one is more interesting because we have info that needs to be verified. First of all, it says that it is required. Second, it says that it is the int64 value. The first requirement is that the ID is required. And we are going to write two test cases, one positive and one negative. The positive test case again is included in the happy path. We have sent the ID, one, and the negative test case is already written as well. That is the one we selected for the first negative test case, when the path ID is not thinned. So the required requirement is covered. Let's move to the next requirement. We have the requirement that the path ID parameter should be int64. What does it mean? The int data type is a number. The range of numbers, it starts from minus a lot. And it ends with plus a lot. We don't have any other information about the limits, because of this we are going to add five tests. Even six tests. First of all, happy path is the most common valid value. We will send one and it is already written. After that, we will have min value, minus a lot, and the max value, plus a lot. And I will add zero. It is specific value, never a bad idea to check it. To the negative test cases, we will add two test cases. The first one is below the min valid value. The second one is above the max value. If I have missed something, let me know in the comments or questions. Let's run this test in that postman. The first test is to send the min value in the path ID parameter. And what do we see in the results? And we can see the valid response body. It says that the path is not found. As we discussed before, you need to create a path if you want a path in the response. We didn't create it, so we got a response that there is no path in the database. It looks fine. Let's say the request and the test result. Here is the positive folder. As min is the valid number. And now let's send the value below the min limit. And we can see that we receive different result. The response code is the same, but the response body is different. Number format exception. Which looks valid. We got the valid response for invalid request. Let's save it and do the rest of the tests. It looks like a lot of work, so let's do a small coffee break. And again, you can pause the video and send up. It is good for your back. Look at the window. It is good for your eyes. Care about yourself. ABI can wait one minute. Okay, let's go back to the scenario. And while you were drinking coffee, I finished the job. Now we have the test cases on the checklist. Happy path. Min, max, zero test cases in the positive folder. And empty below min above max in the negative folder. Isn't it cool? So what's next? To be honest, we already have pretty good coverage of the bad ID parameter. But I will add one more invalid test related to it. Make your willing to guess. The bad ID is int value. It means it accepts only numbers. We can put their path's names, for example, or special character. So I added two more test cases, the fifth and the sixth. Send a text instead of the valid number. And send the special characters. Let's check these in the postman. And what we play with it, we can see that behavior is different even per character. Here we received a 404 response code in the unknown error, null for URL. And here we got the HTML error and the 400 response code. Bad request. In this scenario, we received 400 response codes as well. But empty body. To be honest, it looks like the real bug. The IPI should accept anything but numbers. And if the user puts something except the number, error should be the same. For now, we won't log the bug. I will tell you later what we are going to do with our results. So we have written 10 test cases already. This is not bad. Not bad at all. And we haven't tested the response yet. Let's learn is documentation. And what we can see on the screen. First of all, we see the real response. The response code and the response body. And in the love part, we can see the documentation. The response codes and the response bodies for different scenarios. And we have a problem. So we wrote the happy path test case. And they were specified that we should receive 200 OK. But when we send it, we don't receive 200 OK. We receive 404 not found. And the error response body. And if you will compare it to the document, you can see that it is not what you expected. You expected something like what the manager shared with Tom. Or at least something like this, because the request is valid. And same as we discussed before, you can think that you found the bug, but in reality, it is not a bug. When we start this tutorial, I imagine that effective exploratory can be only if we have some knowledge of the project. And the main problem for testing this GAD endpoint is that we don't know how to set the test data. What I mean by this is you are testing GAD endpoint. The GAD method can redrive information. It shows you what is in the database. If you want to see Tom in the server response body, you need to create Tom in the database first. So we are limited, very limited in our testing. And nothing can be done now. We can only write this down and highlight it in the meeting with the manager. And we will do it in the end of the video. For now, let's start with the response code. And we can see 3 of them. 200 OK, 400 in valid ID, and 404 not found. Let's start from 200 OK. 200 OK will be added to our happy path, because that is what we expected. We send the valid request and the valid response code should be returned. And we can see that in the documentation it is 200. But I will mark the happy path as red and we'll write a comment. So we need to talk with the manager. That we need the data to be set up and not changed, or we need to learn how to set data on our own. Or they will hard code data. That we will send ID1 and the data will always be the same. Or we will learn how to set it dynamically. As the expert will prefer a second approach, dynamic data. We will discuss this in the future videos. Let's check the next response code. The second response code is for 100. It says it when the invalid ID is supplied. And I have a question about it. What does it mean by invalid ID? Text? Special characters? Above max? Or negative number? We don't know. There is no other choice than to run all our tests in postman, and not the response code we receive. Let's do it. So we send a text. As we discussed, it is invalid as the ID should be integer. And we got 404. Doesn't look right. Let's note it. And there we go. We wrote there 404 response code with the text in the valid test case. And we will need to discuss this in the future with the team. Let's write the rest of the test cases. And we have updated our checklist. The positive test cases are blocked with the issue. That we can't set test data. And we'll have to comment for it. And the negative test cases have different results. Most of them provide 404. One returns 405. And only one case returned 400. And because of it, we won't write any additional test cases for now. We will just update the character test case to send a percentage character. As it provides 400 response core, the one we needed. But in general, we will discuss our findings with the team. And we will talk about it later. Let's finish the test in first. For now, we were able to receive the 400 at least in one test case. It is already a small win. Let's move to the last response code, 404. First of all, we can see that we were able to receive the response several times. But that is not what we looked for. We will discuss this later. The scenario which we need here is the next. You send the valid request. Let's say ID is two. But a pad is not created in the database. Because of this, you receive a 404 response code. We don't have such a scenario in our checklist yet. And it's up to you where to put it. Positive or negative, that is the question. And yes, it definitely a big question to answer. And I will put it to the positive test cases. But again, it is up to you. You can show your idea in the comments or questions. Let's run it in the postman. And we got 200 okay. Is this a bug? What do you think? Should we log a de facto report? And my answer is no. We have discussed this several times. This test case is blocked for the same reason as the other positive test cases. We need to learn how to create valid data before execution. We need to know how to delete the pad. Anyway, we are done with the response codes. Let's check the response body. And I have bad news for you. All test cases related to the response body are blocked for exactly the same reason. We can't set up the valid or invalid test data. Because of this, I will do the next. In our checklist, we'll add a response body check to the happy past test cases. I expect to have more than one type of valid response body because of it, we'll add here as well. And I expect to set bad data in the database, so I will add it to the negative test cases. And we'll mark those as blocked, all of them. Additionally, I will write here the response body is saved to the postman and needs to be checked in all those scenarios. I think we did a great job. It is time to summarize the results. It looks like a lot of work, so let's do a small coffee break. And again, I will repeat myself a lot with this. You can pause the video and stand up. It is good for your back. Look at the window. It is good for your eyes. Care about yourself. ABI can wait one minute. Okay, let's go back to the APIs. The happy past test case is blocked. We can't set test data, so we can't receive the valid response code or body. The same is related to all positive test cases. If we want to receive some specific response code or some specific body, we need to set the test data and we can't do it right now. So valid test cases are blocked. If we talk about a valid response body test case, there is no reason to investigate it for now. When we will get access to the postman, we will be able to create a big checklist and we will do it in the next video. And if we talk about negative test cases, we just need to discuss all our results with the team, because it looks like there are a lot of issues. So what's next? First of all, you need to set a meeting with a product owner. Somebody who knows the project should go through your findings. And the site, what is the back, what is the improvement, and what will be left as it is. Also, you need to discuss your access to the product, as your testing is very limited for now. And once your access will be solved and you will have the answers to all your questions, you can run the next explore to your testing cycle. And after that, we will have a lot of work. Finalize the checklist, prioritize the test cases, create test suits, smoke, regression, and all of this will be done in the next videos.